datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Posts       Post[]
  Comment     Comment[]
  Following   Following? @relation(fields: [followingId], references: [id])
  followingId String?
  Followers   Followers? @relation(fields: [followersId], references: [id])
  followersId String?
}

model Post {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  title    String    @db.VarChar(50)
  content  String
  userId   String
  likes    String[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  post    Post     @relation(fields: [postId], references: [id])
  likes   String[]
  message String
  userId  String
  postId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Following {
  id   String @id @default(uuid())
  user User[]
}

model Followers {
  id   String @id @default(uuid())
  user User[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
